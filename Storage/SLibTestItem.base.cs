//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into SLibTestItem.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using StorageLib;
using System;


namespace StorageLibBenchmark {


  public partial class SLibTestItem: IStorageItem<SLibTestItem> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for SLibTestItem. Gets set once SLibTestItem gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem sLibTestItem, int key, bool _) {
      ((SLibTestItem)sLibTestItem).Key = key;
    }


    public string Name { get; private set; }


    /// <summary>
    /// Stores only dates but no times.
    ///  </summary>
    public DateTime Date { get; private set; }


    /// <summary>
    /// Stores decimal with 5 digits after comma.
    ///  </summary>
    public decimal ADecimal { get; private set; }


    public bool ABool { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Name", "Date", "ADecimal", "ABool"};


    /// <summary>
    /// None existing SLibTestItem, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoSLibTestItem. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoSLibTestItem.
    /// </summary>
    internal static SLibTestItem NoSLibTestItem = new SLibTestItem("NoName", DateTime.MinValue.Date, Decimal.MinValue, false, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of SLibTestItem has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/SLibTestItem, /*new*/SLibTestItem>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// SLibTestItem Constructor. If isStoring is true, adds SLibTestItem to DC.Data.SLibTestItems.
    /// </summary>
    public SLibTestItem(
      string name, 
      DateTime date, 
      decimal aDecimal, 
      bool aBool, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      Name = name;
      Date = date.Floor(Rounding.Days);
      ADecimal = aDecimal.Round(5);
      ABool = aBool;
      onConstruct();
      if (DC.Data?.IsTransaction??false) {
        DC.Data.AddTransaction(new TransactionItem(0,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public SLibTestItem(SLibTestItem original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Name = original.Name;
      Date = original.Date;
      ADecimal = original.ADecimal;
      ABool = original.ABool;
      onCloned(this);
    }
    partial void onCloned(SLibTestItem clone);


    /// <summary>
    /// Constructor for SLibTestItem read from CSV file
    /// </summary>
    private SLibTestItem(int key, CsvReader csvReader){
      Key = key;
      Name = csvReader.ReadString();
      Date = csvReader.ReadDate();
      ADecimal = csvReader.ReadDecimal();
      ABool = csvReader.ReadBool();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New SLibTestItem read from CSV file
    /// </summary>
    internal static SLibTestItem Create(int key, CsvReader csvReader) {
      return new SLibTestItem(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds SLibTestItem to DC.Data.SLibTestItems.<br/>
    /// Throws an Exception when SLibTestItem is already stored.<br/>
    /// Returns true unless onStoring() cancels storing.
    /// </summary>
    public bool Store() {
      if (Key>=0) {
        throw new Exception($"SLibTestItem cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return false;

      DC.Data._SLibTestItems.Add(this);
      onStored();
      return true;
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write SLibTestItem to CSV file
    /// </summary>
    public const int EstimatedLineLength = 175;


    /// <summary>
    /// Write SLibTestItem to CSV file
    /// </summary>
    internal static void Write(SLibTestItem sLibTestItem, CsvWriter csvWriter) {
      sLibTestItem.onCsvWrite();
      csvWriter.Write(sLibTestItem.Name);
      csvWriter.WriteDate(sLibTestItem.Date);
      csvWriter.WriteDecimal5(sLibTestItem.ADecimal);
      csvWriter.Write(sLibTestItem.ABool);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates SLibTestItem with the provided values.<br/>
    /// Returns true unless onUpdating() cancels updating.
    /// </summary>
    public bool Update(string name, DateTime date, decimal aDecimal, bool aBool) {
      var clone = new SLibTestItem(this);
      var isCancelled = false;
      onUpdating(name, date, aDecimal, aBool, ref isCancelled);
      if (isCancelled) return false;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Name!=name) {
        Name = name;
        isChangeDetected = true;
      }
      var dateRounded = date.Floor(Rounding.Days);
      if (Date!=dateRounded) {
        Date = dateRounded;
        isChangeDetected = true;
      }
      var aDecimalRounded = aDecimal.Round(5);
      if (ADecimal!=aDecimalRounded) {
        ADecimal = aDecimalRounded;
        isChangeDetected = true;
      }
      if (ABool!=aBool) {
        ABool = aBool;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._SLibTestItems.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(0, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    return true;
    }
    partial void onUpdating(
      string name, 
      DateTime date, 
      decimal aDecimal, 
      bool aBool, 
      ref bool isCancelled);
    partial void onUpdated(SLibTestItem old);


    /// <summary>
    /// Updates this SLibTestItem with values from CSV file
    /// </summary>
    internal static void Update(SLibTestItem sLibTestItem, CsvReader csvReader){
      //read first all property values into local variables
      var name = csvReader.ReadString();

      var date = csvReader.ReadDate();

      var aDecimal = csvReader.ReadDecimal();

      var aBool = csvReader.ReadBool();

      //update not readonly properties
      sLibTestItem.Name = name;
      sLibTestItem.Date = date;
      sLibTestItem.ADecimal = aDecimal;
      sLibTestItem.ABool = aBool;
      sLibTestItem.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes SLibTestItem from DC.Data.SLibTestItems.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"SLibTestItem.Release(): SLibTestItem '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleasing();
      DC.Data._SLibTestItems.Remove(Key);
      onReleased();
    }
    partial void onReleasing();
    partial void onReleased();


    /// <summary>
    /// Disconnects SLibTestItem from parents and possibly from dictionaries in DC.Data.
    /// </summary>
    internal static void Disconnect(SLibTestItem sLibTestItem){
      sLibTestItem.onDisconnected();
    }
    partial void onDisconnected();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var sLibTestItem = (SLibTestItem) item;
      sLibTestItem.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases SLibTestItem from DC.Data.SLibTestItems as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var sLibTestItem = (SLibTestItem) item;
      sLibTestItem.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the SLibTestItem item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (SLibTestItem) oldStorageItem;//an item clone with the values before item was updated
      var item = (SLibTestItem) newStorageItem;//is the instance whose values should be restored

      // updated item: restore old values
      item.Name = oldItem.Name;
      item.Date = oldItem.Date;
      item.ADecimal = oldItem.ADecimal;
      item.ABool = oldItem.ABool;
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(SLibTestItem oldSLibTestItem);


    /// <summary>
    /// Adds SLibTestItem to DC.Data.SLibTestItems as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var sLibTestItem = (SLibTestItem) item;
      sLibTestItem.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Name}|" +
        $" {Date.ToShortDateString()}|" +
        $" {ADecimal}|" +
        $" {ABool}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Name}," +
        $" {Date.ToShortDateString()}," +
        $" {ADecimal}," +
        $" {ABool}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Name: {Name}," +
        $" Date: {Date.ToShortDateString()}," +
        $" ADecimal: {ADecimal}," +
        $" ABool: {ABool};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
